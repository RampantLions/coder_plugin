# `coder_plugin/pyproject.toml`

# ======================================================================================================================
# 🏗️ Build Configurations
# ======================================================================================================================

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🛠️ Build System Configuration
#      ╰─▶ Standard PDM backend for packaging
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

# ======================================================================================================================
# 🗂️️ Project Configurations
# ======================================================================================================================

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   📦 Project Metadata
#      ╰─▶ Metadata about this plugin project itself
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[project]
name = "coder_plugin"
version = "0.0.1"
description = "Coder Plugin"
readme = { file = ".github/README.md", content-type = "text/markdown" }
license = { file = ".github/LICENSE" }
authors = [{ name = "Joshua Wiechman", email = "liminal.cognition@gmail.com" }]
maintainers = [{ name = "Joshua Wiechman", email = "liminal.cognition@gmail.com" }]
requires-python = ">=3.11"
dependencies = [
    "importlib-metadata",
    "loguru>=0.7.3",
    "pluggy==1.0"
]
keywords = []
classifiers = [
  "Development Status :: 3 - Alpha",
  "Development Status :: 4 - Beta",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
#  "License :: OSI Approved :: MIT License",
#  "License :: OSI Approved :: BSD license",
#  "License :: OSI Approved :: Apache Software License 2.0",
#  "License :: OSI Approved :: ISC license",
#  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Internet",
  "Topic :: Software Development :: Build Tools",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development"
]

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   📦 Optional Dependencies
#      ╰─▶ Additional groups of dependencies (e.g., dev, docs, testing)
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[project.optional-dependencies]
dev = [
    "bandit",
    "black",
    "build",
    "coverage[toml]",
    "flake8",
    "flake8-bugbear==23.5.9",
    "flake8-docstrings",
    "flake8-formatter_junit_xml",
    "flake8-pyproject",
    "isort",
    "pre-commit",
    "pylint",
    "pylint_junit",
    "pytest",
    "pytest-cov",
    "pytest-github-actions-annotate-failures",
    "pytest-mock",
    "pytest-runner",
    "mypy",
    "ruff",
    "safety",
    "twine"
]
docs = [
    "sphinx>=7.2",
    "furo",
    "sphinx-autobuild",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "sphinx-rtd-theme",
]

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   ⛓️ Project URLs
#      ╰─▶ Useful project and repository links
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[project.urls]

# 🔗 Project homepage (e.g., GitHub Pages, custom landing page).
Homepage = "https://RampantLions.github.io/coder_plugin/"

# 🔗 Canonical link to the repository (can duplicate Source for clarity).
Repository = "https://github.com/RampantLions/coder_plugin"

# 🔗 Link to the full source code repository.
Source = "https://github.com/RampantLions/coder_plugin"

# 🔗 Link to version history, release logs, or changelogs (e.g., Hatch auto-generated).
History = "https://hatch.pypa.io/dev/history/coder_plugin/"

# 🔗 Custom changelog file instead of Hatch history integration.
Changelog = "https://github.com/RampantLions/coder_plugin/blob/master/CHANGELOG.md"

# 🔗 Primary documentation page (e.g., README or external docs).
Documentation = "https://github.com/RampantLions/coder_plugin#readme"

# 🔗 Issue tracker for bug reports and feature requests.
Issues = "https://github.com/RampantLions/coder_plugin/issues"

# 🔗 Synonym for Issues — retained for compatibility with tools expecting 'Tracker'.
Tracker = "https://github.com/RampantLions/coder_plugin/issues"

# 🔗 Sponsorship link for supporting development via GitHub Sponsors.
Sponsor = "https://github.com/sponsors/RampantLions"

# 🔗 Alternate donation link (same as Sponsor, allows duplication for tools that read 'Donate').
Donate = "https://github.com/sponsors/RampantLions"

# ======================================================================================================================
# ⚙️ Tool Configurations
# ======================================================================================================================

# {%if cookiecutter.bandit_enabled == "y" %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🛡️ Bandit Security Linter Configuration
#      ╰─▶ Scans code for security vulnerabilities in Python code
#      🔗 https://bandit.readthedocs.io/en/latest/config.html
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.bandit]
exclude_dirs = ["build","dist","tests","scripts"]
number = 4
recursive = true
targets = "src"

# {%- endif %}

# {%if cookiecutter.black_enabled == "y" %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🎨 Black Formatter Configuration
#      ╰─▶ Defines formatting rules for automatic code formatting
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.black]
fast = true
line-length = 120
target-version = ['py311']
#target-version = ["py{{ cookiecutter.python_version | replace('.', '') }}"]

# {%- endif %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   📈 Coverage HTML Report Output
#      ╰─▶ Defines where HTML coverage reports are saved
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.coverage.html]
directory = "htmlcov"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   📈 Coverage Run Settings
#      ╰─▶ Controls how coverage measurement is collected
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.coverage.run]
branch = true
source = ["src"]
parallel = true

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   📈 Coverage Report Settings
#      ╰─▶ Controls how coverage results are reported
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]
fail_under = 80
show_missing = true
skip_covered = true
skip_empty = true
precision = 2

# {% if cookiecutter.flake8_enabled == "y" %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🐍 Flake8 Linter Configuration
#      ╰─▶ Defines code style and linting rules enforced by Flake8
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.flake8]
exclude = [
    ".eggs",
    ".git",
    ".tox",
    "nssm",
    "obj",
    "out",
    "packages",
    "pywin32",
    "tests",
    "swagger_client"
]
ignore = [
    "E722",  # Do not use bare except
    "B001",  # Do not use bare except (bugbear duplicate)
    "W503",  # Line break before binary operator (conflicts with black)
    "E203",  # Whitespace before ':' (conflicts with black)
    "D107",  # Missing docstring in __init__
]
max-line-length = 120
select = "E,F,W,C90,B,B9,D,B901,B902,B903"

# {%- endif %}

# {% if cookiecutter.isort_enabled == "y" %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🗂️ Isort Import Sorter Configuration
#      ╰─▶ Defines sorting rules for Python imports
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.isort]
profile = "black"
line_length = 120
known_first_party = ["coder_plugin"]
known_third_party = ["loguru", "pluggy"]
src_paths = ["src", "tests"]

# {%- endif %}

# {% if cookiecutter.mypy_enabled == "y" %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🔎 Mypy Static Typing Configuration
#      ╰─▶ Enforces type checking rules for static analysis
#      🔗 https://mypy.readthedocs.io/en/stable/config_file.html
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = ["tests/"]
files = ["src"]
ignore_missing_imports = true
no_implicit_optional = true
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_ignores = true

# {%- endif %}

# # {% if cookiecutter.pdm_enabled == "y" %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   ⚙️ PDM Project Settings
#      ╰─▶ PDM-specific project configurations (e.g., versioning)
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pdm]
package-dir = "src"
version = { source = "scm" }

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   ⚙️ PDM Build Settings
#      ╰─▶ Settings for building distributions using PDM
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pdm.build]
includes = ["src/coder_plugin"]

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   ⚙️ PDM Installation Settings
#      ╰─▶ Controls installation behavior for PDM (e.g., use UV installer)
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pdm.installation]
installer = "uv"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🚀 PDM Script Shortcuts
#      ╰─▶ Defines shortcut commands for development and CI tasks
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pdm.scripts]
# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# 🚀 Development Utilities Scripts
# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
build = "pdm build"
publish = "pdm publish"
pre-commit-install = "pre-commit install"
run = "python src/coder_plugin_example/main.py"

# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# 📚 Sphinx Documentation Commands
# Requires:
# ╰─▶ MacOS:    brew install mactex
# ╰─▶ Linux:    sudo apt-get install texlive-full
# ╰─▶ Windows:  Install MiKTeX or TeX Live.
# Once installed, the make all-pdf inside the generated latex folder will work.
# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
docs-build = "sphinx-build -b html docs/source docs/build/html"
docs-clean-html = "rm -rf docs/build/html"
docs-epub = "sphinx-build -b epub docs/source docs/build/epub"
docs-pdf = "sphinx-build -b latex docs/source docs/build/latex && make -C docs/build/latex all-pdf"
docs-serve = "sphinx-autobuild docs/ docs/_build/html --port 8000 --open-browser"
docs-serve-native = "python -m http.server --directory docs/build/html"

# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# 🧪 Test Commands Scripts
# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
test = "pytest tests"
test-cov = "pytest --cov=src --cov-report=term-missing tests"
test-all = { composite = [
    "pytest --cov=src --cov-report=term-missing --cov-report=xml:coverage.xml --cov-fail-under=0 tests",
] }
test-gh = "pytest --cov=src --cov-report=term-missing --annotate-failures tests"

# # {%- endif %}

# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# 🧹 Lint and Format Commands Scripts
# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
format = { composite = [
    "isort src tests",
    "black src tests",
    "ruff check src tests --fix"
] }
format-black = "black src tests"
format-isort = "isort src tests"
format-ruff = "ruff check src tests --fix"

lint = { composite = [
    "ruff check src tests",
    "black --check src tests",
    "isort --check-only src tests",
    "flake8 src tests",
    "pylint src tests",
    "mypy src tests"
] }
lint-black = "black --check src tests"
lint-isort = "isort --check-only src tests"
lint-flake8 = "flake8 src tests"
lint-mypy = "mypy src tests"
lint-pylint = "pylint src tests"
lint-ruff = "ruff check src tests"

# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# 🛡️ Security Scan Commands Scripts
# ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
security-bandit = "bandit -r src -n 4 -x build,dist,tests,scripts"
security-safety = "safety check"
security = { composite = [
    "bandit -r src -n 4 -x build,dist,tests,scripts",
    "safety check"
] }

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🛡️ Pre-Commit Hooks Configuration
#      ╰─▶ Defines Git pre-commit hooks for automated code quality checks
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pre-commit]
repos = [
  # Black formatter
  { repo = "https://github.com/psf/black", rev = "stable", hooks = [
      { id = "black" },
  ] },

  # Isort import sorter (mirror for pre-commit)
  { repo = "https://github.com/pre-commit/mirrors-isort", rev = "v5.12.0", hooks = [
      { id = "isort" },
  ] },

  # Ruff linter
  { repo = "https://github.com/charliermarsh/ruff-pre-commit", rev = "v0.1.0", hooks = [
      { id = "ruff" },
  ] },

  # Mypy static type checker
  { repo = "https://github.com/pre-commit/mirrors-mypy", rev = "v1.7.1", hooks = [
      { id = "mypy" },
  ] },

  # Flake8 code linter
  { repo = "https://github.com/pre-commit/mirrors-flake8", rev = "v5.0.4", hooks = [
      { id = "flake8" },
  ] },

  # Pylint code linter
  { repo = "https://github.com/PyCQA/pylint", rev = "v3.0.0a6", hooks = [
      { id = "pylint" },
  ] },

  # Bandit security scanner
  { repo = "https://github.com/PyCQA/bandit", rev = "1.7.5", hooks = [
      { id = "bandit" },
  ] },

  # Safety package vulnerability scanner
  { repo = "https://github.com/pycqa/safety", rev = "2.3.5", hooks = [
      { id = "safety" },
  ] },

  # Core pre-commit checks
  { repo = "https://github.com/pre-commit/pre-commit-hooks", rev = "v4.4.0", hooks = [
      { id = "check-ast" },
      { id = "check-json" },
      { id = "check-json-schema" },
      { id = "check-toml" },
      { id = "check-xml" },
      { id = "check-yaml" },
      { id = "check-symlinks" },
      { id = "check-added-large-files" },
      { id = "check-merge-conflict" },
      { id = "check-case-conflict" },
      { id = "check-executables-have-shebangs" },
      { id = "check-shebang-scripts-are-executable" },
      { id = "debug-statements" },
      { id = "mixed-line-ending" },
      { id = "end-of-file-fixer" },
      { id = "trailing-whitespace" },
      { id = "requirements-txt-fixer" },
  ] },

  # Isort native config for annotations (not mirror)
  { repo = "https://github.com/PyCQA/isort", rev = "5.12.0", hooks = [
      { id = "isort", args = ["-a", "from __future__ import annotations"] },
  ] },

  # Pyupgrade auto modernizer
  { repo = "https://github.com/asottile/pyupgrade", rev = "v2.31.0", hooks = [
      { id = "pyupgrade", args = ["--py37-plus"] },
  ] },

  # Pycln dead import remover
  { repo = "https://github.com/hadialqattan/pycln", rev = "v1.2.5", hooks = [
      { id = "pycln", args = ["--config=pyproject.toml"], stages = ["manual"] },
  ] },

  # Codespell typo finder
  { repo = "https://github.com/codespell-project/codespell", rev = "v2.1.0", hooks = [
      { id = "codespell" },
  ] },

  # Pygrep hooks (Python regex checks)
  { repo = "https://github.com/pre-commit/pygrep-hooks", rev = "v1.9.0", hooks = [
      { id = "python-check-blanket-noqa" },
      { id = "python-check-blanket-type-ignore" },
      { id = "python-no-log-warn" },
      { id = "python-no-eval" },
      { id = "python-use-type-annotations" },
      { id = "rst-backticks" },
      { id = "rst-directive-colons" },
      { id = "rst-inline-touching-normal" },
  ] },

  # Manifest file checker
  { repo = "https://github.com/mgedmin/check-manifest", rev = "0.47", hooks = [
      { id = "check-manifest", stages = ["manual"] },
  ] },

  { repo = "https://github.com/pre-commit/mirrors-sphinx", rev = "v7.2.6", hooks = [
    { id = "sphinx-build", args = ["-b", "html", "docs/source", "docs/build"] },
  ] }
]

[tool.pre-commit.ci]
autoupdate_commit_msg = "chore: update pre-commit hooks"
autofix_commit_msg = "style: pre-commit fixes"

# {% if cookiecutter.pylint_enabled == "y" %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Linter Configuration
#      ╰─▶ Defines code style and linting rules enforced by Pylint
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint]
extension-pkg-whitelist= [
    "numpy",
    "torch",
    "cv2",
    "pyodbc",
    "pydantic",
    "ciso8601",
    "netcdf4",
    "scipy"
]
ignore="CVS"
ignore-patterns="test.*?py,conftest.py"
init-hook='import sys; sys.setrecursionlimit(8 * sys.getrecursionlimit())'
jobs=0
limit-inference-results=100
persistent="yes"
suggestion-mode="yes"
unsafe-load-any-extension="no"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Basic Naming Conventions
#      ╰─▶ Rules for naming variables, functions, classes, and attributes
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.basic]
argument-naming-style="snake_case"
attr-naming-style="snake_case"
bad-names= [
    "foo",
    "bar"
]
class-attribute-naming-style="any"
class-naming-style="PascalCase"
const-naming-style="UPPER_CASE"
docstring-min-length=-1
function-naming-style="snake_case"
good-names= [
    "i",
    "j",
    "k",
    "ex",
    "Run",
    "_"
]
include-naming-hint="yes"
inlinevar-naming-style="any"
method-naming-style="snake_case"
module-naming-style="any"
no-docstring-rgx="^_"
property-classes="abc.abstractproperty"
variable-naming-style="snake_case"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Class Structure Settings
#      ╰─▶ Rules related to class attribute definitions and methods
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.classes]
defining-attr-methods= [
    "__init__",
    "__new__",
    "setUp",
    "__post_init__"
]
exclude-protected= [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make"
]
valid-classmethod-first-arg="cls"
valid-metaclass-classmethod-first-arg="cls"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Design Constraints
#      ╰─▶ Limits for complexity such as arguments, branches, and methods
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.design]
max-args=5
max-attributes=7
max-bool-expr=5
max-branches=12
max-locals=15
max-parents=7
max-public-methods=20
max-returns=6
max-statements=50
min-public-methods=2

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Exception Handling Settings
#      ╰─▶ Controls allowed exception types
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.exceptions]
overgeneral-exceptions= [
    "BaseException",
    "Exception"
]

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Formatting Rules
#      ╰─▶ Settings for indentation, line length, and format constraints
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.format]
ignore-long-lines="^\\s*(# )?.*['\"]?<?https?://\\S+>?"
indent-after-paren=4
indent-string='    '
max-line-length=120
max-module-lines=1000
single-line-class-stmt="no"
single-line-if-stmt="no"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Import Rules
#      ╰─▶ Rules for handling module imports and wildcard usage
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.imports]
allow-wildcard-with-all="no"
analyse-fallback-blocks="no"
deprecated-modules="optparse,tkinter.tix"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Logging Configuration
#      ╰─▶ Settings for logging module usage and formats
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.logging]
logging-format-style="old"
logging-modules="logging"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Master Settings
#      ╰─▶ Global pylint settings like ignores and recursion limits
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.master]
ignore = ["tests", "docs", "build"]
ignore-patterns = ["tests/.*", ".*_test.py", "docs/.*"]
init-hook = "import sys; sys.path.append('src')"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Message Control
#      ╰─▶ Enables or disables specific pylint warnings and errors
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.messages_control]
disable = ["duplicate-code", "import-error", "relative-beyond-top-level"]
enable="c-extension-no-member"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Miscellaneous Settings
#      ╰─▶ Miscellaneous rules including TODO note detection
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.miscellaneous]
notes= [
    "FIXME",
    "XXX",
    "TODO"
]

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Refactoring Constraints
#      ╰─▶ Rules for refactoring suggestions like maximum nesting
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.refactoring]
max-nested-blocks=5
never-returning-functions="sys.exit"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Report Output
#      ╰─▶ Controls reporting formats, scores, and evaluation formulas
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.reports]
evaluation="10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
output-format="text"
# output-format="pylint_junit.JUnitReporter"
reports="no"
score="yes"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Similarity Detection
#      ╰─▶ Settings for detecting duplicate code across files
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.similarities]
ignore-comments="yes"
ignore-docstrings="yes"
ignore-imports="yes"
min-similarity-lines=7

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Spelling Checks
#      ╰─▶ Spelling suggestion controls for code comments and docstrings
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.spelling]
max-spelling-suggestions=4
spelling-store-unknown-words="no"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint String Handling
#      ╰─▶ Controls rules for string concatenation across lines
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.string]
check-str-concat-over-line-jumps="no"

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Type Checking Rules
#      ╰─▶ Settings for verifying attribute and member existence
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.typecheck]
contextmanager-decorators="contextlib.contextmanager"
generated-members="numpy.*,np.*,pyspark.sql.functions,collect_list"
ignore-mixin-members="yes"
ignore-none="yes"
ignore-on-opaque-inference="yes"
ignored-classes="optparse.Values,thread._local,_thread._local,numpy,torch,swagger_client"
ignored-modules="numpy,torch,swagger_client,netCDF4,scipy"
missing-member-hint="yes"
missing-member-hint-distance=1
missing-member-max-choices=1

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Pylint Variable Naming and Usage
#      ╰─▶ Settings for dummy variables, callbacks, and naming patterns
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pylint.variables]
additional-builtins="dbutils"
allow-global-unused-variables="yes"
callbacks= [
    "cb_",
    "_cb"
]
dummy-variables-rgx="_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names="_.*|^ignored_|^unused_"
init-import="no"
redefining-builtins-modules="six.moves,past.builtins,future.builtins,builtins,io"

# {%- endif %}

# {% if cookiecutter.pytest_enabled == "y" %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧪 Pytest Configuration
#      ╰─▶ Controls pytest behavior and settings
#      🔗 https://docs.pytest.org/en/7.2.x/reference/customize.html
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.pytest.ini_options]
addopts = "--strict-markers --cov-report xml:coverage.xml --cov src --cov-fail-under 0 --cov-append --annotate-failures -m 'not integration'"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "spark: marks tests which need Spark",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]
minversion = "7.0"
pythonpath = ["src"]
testpaths = ["tests"]

# {%- endif %}

# {% if cookiecutter.ruff_enabled == "y" %}

# ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
#   🧹 Ruff Linter Configuration
#      ╰─▶ Defines code style and linting rules enforced by Ruff
#      🔗 https://docs.astral.sh/ruff/configuration/
# ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
[tool.ruff]
exclude = ["tests", "docs", "build"]
extend-select = ["I", "B", "C4", "SIM", "T20"]
ignore = ["E501"]
indent-width = 4
line-length = 120
src = ["."]
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
extend-select = ["I"]
ignore = []

[tool.ruff.lint.per-file-ignores]
# Don't complaine about unused imports in __init__.py
"__init__.py" = ["F401", "F403"]

[tool.ruff.lint.isort]
known-first-party = ["template_python", "tests"]

# {%- endif %}
